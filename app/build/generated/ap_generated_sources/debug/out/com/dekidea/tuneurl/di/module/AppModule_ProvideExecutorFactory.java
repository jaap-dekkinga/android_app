// Generated by Dagger (https://google.github.io/dagger).
package com.dekidea.tuneurl.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.concurrent.Executor;

public final class AppModule_ProvideExecutorFactory implements Factory<Executor> {
  private final AppModule module;

  public AppModule_ProvideExecutorFactory(AppModule module) {
    this.module = module;
  }

  @Override
  public Executor get() {
    return provideInstance(module);
  }

  public static Executor provideInstance(AppModule module) {
    return proxyProvideExecutor(module);
  }

  public static AppModule_ProvideExecutorFactory create(AppModule module) {
    return new AppModule_ProvideExecutorFactory(module);
  }

  public static Executor proxyProvideExecutor(AppModule instance) {
    return Preconditions.checkNotNull(
        instance.provideExecutor(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
