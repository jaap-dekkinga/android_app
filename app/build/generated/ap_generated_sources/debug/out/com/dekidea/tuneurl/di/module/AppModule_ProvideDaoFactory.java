// Generated by Dagger (https://google.github.io/dagger).
package com.dekidea.tuneurl.di.module;

import com.dekidea.tuneurl.db.MyDatabase;
import com.dekidea.tuneurl.db.dao.MyDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideDaoFactory implements Factory<MyDao> {
  private final AppModule module;

  private final Provider<MyDatabase> databaseProvider;

  public AppModule_ProvideDaoFactory(AppModule module, Provider<MyDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public MyDao get() {
    return provideInstance(module, databaseProvider);
  }

  public static MyDao provideInstance(AppModule module, Provider<MyDatabase> databaseProvider) {
    return proxyProvideDao(module, databaseProvider.get());
  }

  public static AppModule_ProvideDaoFactory create(
      AppModule module, Provider<MyDatabase> databaseProvider) {
    return new AppModule_ProvideDaoFactory(module, databaseProvider);
  }

  public static MyDao proxyProvideDao(AppModule instance, MyDatabase database) {
    return Preconditions.checkNotNull(
        instance.provideDao(database), "Cannot return null from a non-@Nullable @Provides method");
  }
}
