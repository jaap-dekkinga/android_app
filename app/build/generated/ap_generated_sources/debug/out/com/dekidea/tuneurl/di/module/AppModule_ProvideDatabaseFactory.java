// Generated by Dagger (https://google.github.io/dagger).
package com.dekidea.tuneurl.di.module;

import android.app.Application;
import com.dekidea.tuneurl.db.MyDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideDatabaseFactory implements Factory<MyDatabase> {
  private final AppModule module;

  private final Provider<Application> applicationProvider;

  public AppModule_ProvideDatabaseFactory(
      AppModule module, Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public MyDatabase get() {
    return provideInstance(module, applicationProvider);
  }

  public static MyDatabase provideInstance(
      AppModule module, Provider<Application> applicationProvider) {
    return proxyProvideDatabase(module, applicationProvider.get());
  }

  public static AppModule_ProvideDatabaseFactory create(
      AppModule module, Provider<Application> applicationProvider) {
    return new AppModule_ProvideDatabaseFactory(module, applicationProvider);
  }

  public static MyDatabase proxyProvideDatabase(AppModule instance, Application application) {
    return Preconditions.checkNotNull(
        instance.provideDatabase(application),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
