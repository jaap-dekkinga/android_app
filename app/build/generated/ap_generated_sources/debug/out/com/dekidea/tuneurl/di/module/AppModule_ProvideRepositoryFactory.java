// Generated by Dagger (https://google.github.io/dagger).
package com.dekidea.tuneurl.di.module;

import com.dekidea.tuneurl.api.Webservice;
import com.dekidea.tuneurl.db.dao.MyDao;
import com.dekidea.tuneurl.repository.Repository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.concurrent.Executor;
import javax.inject.Provider;

public final class AppModule_ProvideRepositoryFactory implements Factory<Repository> {
  private final AppModule module;

  private final Provider<Webservice> webserviceProvider;

  private final Provider<MyDao> daoProvider;

  private final Provider<Executor> executorProvider;

  public AppModule_ProvideRepositoryFactory(
      AppModule module,
      Provider<Webservice> webserviceProvider,
      Provider<MyDao> daoProvider,
      Provider<Executor> executorProvider) {
    this.module = module;
    this.webserviceProvider = webserviceProvider;
    this.daoProvider = daoProvider;
    this.executorProvider = executorProvider;
  }

  @Override
  public Repository get() {
    return provideInstance(module, webserviceProvider, daoProvider, executorProvider);
  }

  public static Repository provideInstance(
      AppModule module,
      Provider<Webservice> webserviceProvider,
      Provider<MyDao> daoProvider,
      Provider<Executor> executorProvider) {
    return proxyProvideRepository(
        module, webserviceProvider.get(), daoProvider.get(), executorProvider.get());
  }

  public static AppModule_ProvideRepositoryFactory create(
      AppModule module,
      Provider<Webservice> webserviceProvider,
      Provider<MyDao> daoProvider,
      Provider<Executor> executorProvider) {
    return new AppModule_ProvideRepositoryFactory(
        module, webserviceProvider, daoProvider, executorProvider);
  }

  public static Repository proxyProvideRepository(
      AppModule instance, Webservice webservice, MyDao dao, Executor executor) {
    return Preconditions.checkNotNull(
        instance.provideRepository(webservice, dao, executor),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
