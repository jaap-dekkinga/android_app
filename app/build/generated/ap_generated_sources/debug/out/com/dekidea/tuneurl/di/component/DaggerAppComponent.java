// Generated by Dagger (https://google.github.io/dagger).
package com.dekidea.tuneurl.di.component;

import android.app.Activity;
import android.app.Application;
import android.app.Service;
import android.arch.lifecycle.ViewModel;
import android.content.BroadcastReceiver;
import android.support.v4.app.Fragment;
import com.dekidea.tuneurl.App;
import com.dekidea.tuneurl.App_MembersInjector;
import com.dekidea.tuneurl.activity.MainActivity;
import com.dekidea.tuneurl.api.Webservice;
import com.dekidea.tuneurl.db.MyDatabase;
import com.dekidea.tuneurl.db.dao.MyDao;
import com.dekidea.tuneurl.di.module.ActivityModule_ContributeMainActivity;
import com.dekidea.tuneurl.di.module.AppModule;
import com.dekidea.tuneurl.di.module.AppModule_ProvideApiWebserviceFactory;
import com.dekidea.tuneurl.di.module.AppModule_ProvideDaoFactory;
import com.dekidea.tuneurl.di.module.AppModule_ProvideDatabaseFactory;
import com.dekidea.tuneurl.di.module.AppModule_ProvideExecutorFactory;
import com.dekidea.tuneurl.di.module.AppModule_ProvideGsonFactory;
import com.dekidea.tuneurl.di.module.AppModule_ProvideRepositoryFactory;
import com.dekidea.tuneurl.di.module.AppModule_ProvideRetrofitFactory;
import com.dekidea.tuneurl.di.module.BroadcastReceiverModule_ContributeConnectivityChangeReceiver;
import com.dekidea.tuneurl.di.module.FragmentModule_ContributeSavedInfoFragment;
import com.dekidea.tuneurl.di.module.ServiceModule_ContributeAPIService;
import com.dekidea.tuneurl.fragment.SavedInfoFragment;
import com.dekidea.tuneurl.fragment.SavedInfoFragment_MembersInjector;
import com.dekidea.tuneurl.receiver.ConnectivityChangeReceiver;
import com.dekidea.tuneurl.receiver.ConnectivityChangeReceiver_MembersInjector;
import com.dekidea.tuneurl.repository.Repository;
import com.dekidea.tuneurl.service.APIService;
import com.dekidea.tuneurl.service.APIService_MembersInjector;
import com.dekidea.tuneurl.view_model.FactoryViewModel;
import com.dekidea.tuneurl.view_model.FactoryViewModel_Factory;
import com.dekidea.tuneurl.view_model.SavedInfoViewModel;
import com.dekidea.tuneurl.view_model.SavedInfoViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<FragmentModule_ContributeSavedInfoFragment.SavedInfoFragmentSubcomponent.Builder>
      savedInfoFragmentSubcomponentBuilderProvider;

  private Provider<ServiceModule_ContributeAPIService.APIServiceSubcomponent.Builder>
      aPIServiceSubcomponentBuilderProvider;

  private Provider<
          BroadcastReceiverModule_ContributeConnectivityChangeReceiver
              .ConnectivityChangeReceiverSubcomponent.Builder>
      connectivityChangeReceiverSubcomponentBuilderProvider;

  private AppModule_ProvideGsonFactory provideGsonProvider;

  private AppModule_ProvideRetrofitFactory provideRetrofitProvider;

  private Provider<Webservice> provideApiWebserviceProvider;

  private Provider<Application> applicationProvider;

  private Provider<MyDatabase> provideDatabaseProvider;

  private Provider<MyDao> provideDaoProvider;

  private AppModule_ProvideExecutorFactory provideExecutorProvider;

  private Provider<Repository> provideRepositoryProvider;

  private SavedInfoViewModel_Factory savedInfoViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<FactoryViewModel> factoryViewModelProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<? extends Activity>>>emptyMap());
  }

  private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
      getMapOfClassOfAndProviderOfFactoryOf2() {
    return Collections
        .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
            singletonMap(
                SavedInfoFragment.class, (Provider) savedInfoFragmentSubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf2(),
        Collections.<String, Provider<AndroidInjector.Factory<? extends Fragment>>>emptyMap());
  }

  private Map<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
      getMapOfClassOfAndProviderOfFactoryOf3() {
    return Collections
        .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
            singletonMap(APIService.class, (Provider) aPIServiceSubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf3(),
        Collections.<String, Provider<AndroidInjector.Factory<? extends Service>>>emptyMap());
  }

  private Map<
          Class<? extends BroadcastReceiver>,
          Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
      getMapOfClassOfAndProviderOfFactoryOf4() {
    return Collections
        .<Class<? extends BroadcastReceiver>,
            Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
            singletonMap(
                ConnectivityChangeReceiver.class,
                (Provider) connectivityChangeReceiverSubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf4(),
        Collections
            .<String, Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.savedInfoFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentModule_ContributeSavedInfoFragment.SavedInfoFragmentSubcomponent.Builder>() {
          @Override
          public FragmentModule_ContributeSavedInfoFragment.SavedInfoFragmentSubcomponent.Builder
              get() {
            return new SavedInfoFragmentSubcomponentBuilder();
          }
        };
    this.aPIServiceSubcomponentBuilderProvider =
        new Provider<ServiceModule_ContributeAPIService.APIServiceSubcomponent.Builder>() {
          @Override
          public ServiceModule_ContributeAPIService.APIServiceSubcomponent.Builder get() {
            return new APIServiceSubcomponentBuilder();
          }
        };
    this.connectivityChangeReceiverSubcomponentBuilderProvider =
        new Provider<
            BroadcastReceiverModule_ContributeConnectivityChangeReceiver
                .ConnectivityChangeReceiverSubcomponent.Builder>() {
          @Override
          public BroadcastReceiverModule_ContributeConnectivityChangeReceiver
                  .ConnectivityChangeReceiverSubcomponent.Builder
              get() {
            return new ConnectivityChangeReceiverSubcomponentBuilder();
          }
        };
    this.provideGsonProvider = AppModule_ProvideGsonFactory.create(builder.appModule);
    this.provideRetrofitProvider =
        AppModule_ProvideRetrofitFactory.create(builder.appModule, provideGsonProvider);
    this.provideApiWebserviceProvider =
        DoubleCheck.provider(
            AppModule_ProvideApiWebserviceFactory.create(
                builder.appModule, provideRetrofitProvider));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideDatabaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideDatabaseFactory.create(builder.appModule, applicationProvider));
    this.provideDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideDaoFactory.create(builder.appModule, provideDatabaseProvider));
    this.provideExecutorProvider = AppModule_ProvideExecutorFactory.create(builder.appModule);
    this.provideRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideRepositoryFactory.create(
                builder.appModule,
                provideApiWebserviceProvider,
                provideDaoProvider,
                provideExecutorProvider));
    this.savedInfoViewModelProvider = SavedInfoViewModel_Factory.create(provideRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1)
            .put(SavedInfoViewModel.class, (Provider) savedInfoViewModelProvider)
            .build();
    this.factoryViewModelProvider =
        DoubleCheck.provider(
            FactoryViewModel_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectDispatchingActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    App_MembersInjector.injectDispatchingFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    App_MembersInjector.injectDispatchingServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    App_MembersInjector.injectDispatchingBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityModule_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(MainActivity arg0) {}
  }

  private final class SavedInfoFragmentSubcomponentBuilder
      extends FragmentModule_ContributeSavedInfoFragment.SavedInfoFragmentSubcomponent.Builder {
    private SavedInfoFragment seedInstance;

    @Override
    public FragmentModule_ContributeSavedInfoFragment.SavedInfoFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            SavedInfoFragment.class.getCanonicalName() + " must be set");
      }
      return new SavedInfoFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SavedInfoFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SavedInfoFragmentSubcomponentImpl
      implements FragmentModule_ContributeSavedInfoFragment.SavedInfoFragmentSubcomponent {
    private SavedInfoFragmentSubcomponentImpl(SavedInfoFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(SavedInfoFragment arg0) {
      injectSavedInfoFragment(arg0);
    }

    private SavedInfoFragment injectSavedInfoFragment(SavedInfoFragment instance) {
      SavedInfoFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.factoryViewModelProvider.get());
      return instance;
    }
  }

  private final class APIServiceSubcomponentBuilder
      extends ServiceModule_ContributeAPIService.APIServiceSubcomponent.Builder {
    private APIService seedInstance;

    @Override
    public ServiceModule_ContributeAPIService.APIServiceSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(APIService.class.getCanonicalName() + " must be set");
      }
      return new APIServiceSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(APIService arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class APIServiceSubcomponentImpl
      implements ServiceModule_ContributeAPIService.APIServiceSubcomponent {
    private APIServiceSubcomponentImpl(APIServiceSubcomponentBuilder builder) {}

    @Override
    public void inject(APIService arg0) {
      injectAPIService(arg0);
    }

    private APIService injectAPIService(APIService instance) {
      APIService_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.provideRepositoryProvider.get());
      return instance;
    }
  }

  private final class ConnectivityChangeReceiverSubcomponentBuilder
      extends BroadcastReceiverModule_ContributeConnectivityChangeReceiver
          .ConnectivityChangeReceiverSubcomponent.Builder {
    private ConnectivityChangeReceiver seedInstance;

    @Override
    public BroadcastReceiverModule_ContributeConnectivityChangeReceiver
            .ConnectivityChangeReceiverSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            ConnectivityChangeReceiver.class.getCanonicalName() + " must be set");
      }
      return new ConnectivityChangeReceiverSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ConnectivityChangeReceiver arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ConnectivityChangeReceiverSubcomponentImpl
      implements BroadcastReceiverModule_ContributeConnectivityChangeReceiver
          .ConnectivityChangeReceiverSubcomponent {
    private ConnectivityChangeReceiverSubcomponentImpl(
        ConnectivityChangeReceiverSubcomponentBuilder builder) {}

    @Override
    public void inject(ConnectivityChangeReceiver arg0) {
      injectConnectivityChangeReceiver(arg0);
    }

    private ConnectivityChangeReceiver injectConnectivityChangeReceiver(
        ConnectivityChangeReceiver instance) {
      ConnectivityChangeReceiver_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.provideRepositoryProvider.get());
      return instance;
    }
  }
}
