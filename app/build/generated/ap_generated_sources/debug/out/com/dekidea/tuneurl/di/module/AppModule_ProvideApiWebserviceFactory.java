// Generated by Dagger (https://google.github.io/dagger).
package com.dekidea.tuneurl.di.module;

import com.dekidea.tuneurl.api.Webservice;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class AppModule_ProvideApiWebserviceFactory implements Factory<Webservice> {
  private final AppModule module;

  private final Provider<Retrofit> restAdapterProvider;

  public AppModule_ProvideApiWebserviceFactory(
      AppModule module, Provider<Retrofit> restAdapterProvider) {
    this.module = module;
    this.restAdapterProvider = restAdapterProvider;
  }

  @Override
  public Webservice get() {
    return provideInstance(module, restAdapterProvider);
  }

  public static Webservice provideInstance(
      AppModule module, Provider<Retrofit> restAdapterProvider) {
    return proxyProvideApiWebservice(module, restAdapterProvider.get());
  }

  public static AppModule_ProvideApiWebserviceFactory create(
      AppModule module, Provider<Retrofit> restAdapterProvider) {
    return new AppModule_ProvideApiWebserviceFactory(module, restAdapterProvider);
  }

  public static Webservice proxyProvideApiWebservice(AppModule instance, Retrofit restAdapter) {
    return Preconditions.checkNotNull(
        instance.provideApiWebservice(restAdapter),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
