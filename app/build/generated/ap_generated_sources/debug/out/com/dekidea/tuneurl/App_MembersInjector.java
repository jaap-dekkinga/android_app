// Generated by Dagger (https://google.github.io/dagger).
package com.dekidea.tuneurl;

import android.app.Activity;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.support.v4.app.Fragment;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import javax.inject.Provider;

public final class App_MembersInjector implements MembersInjector<App> {
  private final Provider<DispatchingAndroidInjector<Activity>> dispatchingActivityInjectorProvider;

  private final Provider<DispatchingAndroidInjector<Fragment>> dispatchingFragmentInjectorProvider;

  private final Provider<DispatchingAndroidInjector<Service>> dispatchingServiceInjectorProvider;

  private final Provider<DispatchingAndroidInjector<BroadcastReceiver>>
      dispatchingBroadcastReceiverInjectorProvider;

  public App_MembersInjector(
      Provider<DispatchingAndroidInjector<Activity>> dispatchingActivityInjectorProvider,
      Provider<DispatchingAndroidInjector<Fragment>> dispatchingFragmentInjectorProvider,
      Provider<DispatchingAndroidInjector<Service>> dispatchingServiceInjectorProvider,
      Provider<DispatchingAndroidInjector<BroadcastReceiver>>
          dispatchingBroadcastReceiverInjectorProvider) {
    this.dispatchingActivityInjectorProvider = dispatchingActivityInjectorProvider;
    this.dispatchingFragmentInjectorProvider = dispatchingFragmentInjectorProvider;
    this.dispatchingServiceInjectorProvider = dispatchingServiceInjectorProvider;
    this.dispatchingBroadcastReceiverInjectorProvider =
        dispatchingBroadcastReceiverInjectorProvider;
  }

  public static MembersInjector<App> create(
      Provider<DispatchingAndroidInjector<Activity>> dispatchingActivityInjectorProvider,
      Provider<DispatchingAndroidInjector<Fragment>> dispatchingFragmentInjectorProvider,
      Provider<DispatchingAndroidInjector<Service>> dispatchingServiceInjectorProvider,
      Provider<DispatchingAndroidInjector<BroadcastReceiver>>
          dispatchingBroadcastReceiverInjectorProvider) {
    return new App_MembersInjector(
        dispatchingActivityInjectorProvider,
        dispatchingFragmentInjectorProvider,
        dispatchingServiceInjectorProvider,
        dispatchingBroadcastReceiverInjectorProvider);
  }

  @Override
  public void injectMembers(App instance) {
    injectDispatchingActivityInjector(instance, dispatchingActivityInjectorProvider.get());
    injectDispatchingFragmentInjector(instance, dispatchingFragmentInjectorProvider.get());
    injectDispatchingServiceInjector(instance, dispatchingServiceInjectorProvider.get());
    injectDispatchingBroadcastReceiverInjector(
        instance, dispatchingBroadcastReceiverInjectorProvider.get());
  }

  public static void injectDispatchingActivityInjector(
      App instance, DispatchingAndroidInjector<Activity> dispatchingActivityInjector) {
    instance.dispatchingActivityInjector = dispatchingActivityInjector;
  }

  public static void injectDispatchingFragmentInjector(
      App instance, DispatchingAndroidInjector<Fragment> dispatchingFragmentInjector) {
    instance.dispatchingFragmentInjector = dispatchingFragmentInjector;
  }

  public static void injectDispatchingServiceInjector(
      App instance, DispatchingAndroidInjector<Service> dispatchingServiceInjector) {
    instance.dispatchingServiceInjector = dispatchingServiceInjector;
  }

  public static void injectDispatchingBroadcastReceiverInjector(
      App instance,
      DispatchingAndroidInjector<BroadcastReceiver> dispatchingBroadcastReceiverInjector) {
    instance.dispatchingBroadcastReceiverInjector = dispatchingBroadcastReceiverInjector;
  }
}
